{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { GameObject } from \"./GameObject\";\nimport { Wall } from \"./wall\";\nimport { Snake } from \"./Snake\";\nexport class GameMap extends GameObject {\n  constructor(ctx, parent, store) {\n    super();\n    this.ctx = ctx;\n    this.parent = parent;\n    this.store = store;\n    this.L = 0;\n    this.rows = 13;\n    this.cols = 14;\n    this.walls = [];\n    this.inner_wall_count = 20;\n    this.snakes = [new Snake({\n      id: 0,\n      color: \"#4876EC\",\n      r: this.rows - 2,\n      c: 1\n    }, this), new Snake({\n      id: 1,\n      color: \"#F94848\",\n      r: 1,\n      c: this.cols - 2\n    }, this)];\n  }\n  create_walls() {\n    const g = this.store.state.pk.game_map;\n    for (let r = 0; r < this.rows; r++) {\n      for (let c = 0; c < this.cols; c++) {\n        if (g[r][c]) {\n          this.walls.push(new Wall(r, c, this));\n        }\n      }\n    }\n    return true;\n  }\n  add_listening_events() {\n    if (this.store.state.replay.is_replay) {\n      let k = 0;\n      const a_steps = this.store.state.replay.a_steps;\n      const b_steps = this.store.state.replay.b_steps;\n      const [snake0, snake1] = this.snakes;\n      const interval_id = setInterval(() => {\n        if (k >= a_steps.length - 1) {// last step is a die operation, do not need to replay;\n        } else {\n          snake0.set_direction(a_steps[k]);\n          snake1.set_direction();\n        }\n      }, 300);\n    } else {\n      this.ctx.canvas.focus();\n      this.ctx.canvas.addEventListener(\"keydown\", e => {\n        let d = 0;\n        if (e.key === \"w\") d = 0;else if (e.key === \"d\") d = 1;else if (e.key === \"s\") d = 2;else if (e.key === \"a\") d = 3;\n        if (d >= 0) {\n          this.store.state.pk.socket.send(JSON.stringify({\n            event: \"move\",\n            direction: d\n          }));\n        }\n      });\n    }\n  }\n  start() {\n    for (let i = 0; i < 1000; i++) {\n      if (this.create_walls()) break;\n    }\n    this.add_listening_events();\n  }\n  update_size() {\n    this.L = parseInt(Math.min(this.parent.clientWidth / this.cols, this.parent.clientHeight / this.rows));\n    this.ctx.canvas.width = this.L * this.cols;\n    this.ctx.canvas.height = this.L * this.rows;\n  }\n  check_ready() {\n    //judge if two snake is ready for the next round\n    for (const snake of this.snakes) {\n      if (snake.status !== \"idle\") return false;\n      if (snake.direction === -1) return false;\n    }\n    return true;\n  }\n  next_step() {\n    // let the two snake goes into next round\n    for (const snake of this.snakes) {\n      snake.next_step();\n    }\n  }\n  judge(cell) {\n    // judge if cell is a valid moving target\n    for (const wall of this.walls) {\n      if (wall.r === cell.r && wall.c === cell.c) {\n        return false;\n      }\n    }\n    for (const snake of this.snakes) {\n      let k = snake.cells.length;\n      if (!snake.check_tail_increasing()) {\n        k--;\n      }\n      for (let i = 0; i < k; i++) {\n        if (snake.cells[i].r === cell.r && snake.cells[i].c === cell.c) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  update() {\n    this.update_size();\n    this.render();\n    if (this.check_ready()) {\n      this.next_step();\n    }\n  }\n  render() {\n    const color_even = \"#82EAFD\",\n      color_odd = \"#02BADA\";\n    for (let r = 0; r < this.rows; r++) {\n      for (let c = 0; c < this.cols; c++) {\n        if ((r + c) % 2 == 0) {\n          this.ctx.fillStyle = color_even;\n        } else {\n          this.ctx.fillStyle = color_odd;\n        }\n        this.ctx.fillRect(c * this.L, r * this.L, this.L, this.L);\n      }\n    }\n  }\n}","map":{"version":3,"names":["GameObject","Wall","Snake","GameMap","constructor","ctx","parent","store","L","rows","cols","walls","inner_wall_count","snakes","id","color","r","c","create_walls","g","state","pk","game_map","push","add_listening_events","replay","is_replay","k","a_steps","b_steps","snake0","snake1","interval_id","setInterval","length","set_direction","canvas","focus","addEventListener","e","d","key","socket","send","JSON","stringify","event","direction","start","i","update_size","parseInt","Math","min","clientWidth","clientHeight","width","height","check_ready","snake","status","next_step","judge","cell","wall","cells","check_tail_increasing","update","render","color_even","color_odd","fillStyle","fillRect"],"sources":["/Users/muzhouliu/Desktop/acwing/kob/web/src/assets/scripts/GameMap.js"],"sourcesContent":["import { GameObject } from \"./GameObject\";\nimport { Wall } from \"./wall\";\nimport { Snake } from \"./Snake\";\n\nexport class GameMap extends GameObject {\n    constructor(ctx, parent, store) {\n        super();\n\n\n        this.ctx = ctx;\n        this.parent = parent;\n        this.store = store;\n        this.L = 0;\n\n        this.rows = 13;\n        this.cols = 14;\n\n        this.walls = [];\n        this.inner_wall_count = 20;\n\n        this.snakes = [\n            new Snake({id: 0, color: \"#4876EC\", r: this.rows - 2, c: 1}, this),\n            new Snake({id: 1, color: \"#F94848\", r: 1, c: this.cols - 2}, this),\n        ];\n    }\n\n\n\n    create_walls() {\n        const g = this.store.state.pk.game_map;\n\n        for(let r = 0; r < this.rows; r++) {\n            for(let c = 0; c < this.cols; c++) {\n                if(g[r][c]) {\n                    this.walls.push(new Wall(r, c, this))\n                }\n            }\n        }\n\n        return true;\n    }\n\n\n    add_listening_events() {\n        if (this.store.state.replay.is_replay) {\n            let k = 0;\n            const a_steps = this.store.state.replay.a_steps;\n            const b_steps = this.store.state.replay.b_steps;\n            const [snake0, snake1] = this.snakes;\n            const interval_id = setInterval(() => {\n                if (k >= a_steps.length - 1) { // last step is a die operation, do not need to replay;\n\n                } else {\n                    snake0.set_direction(a_steps[k]);\n                    snake1.set_direction()\n                }\n            }, 300)\n        } else  {\n            this.ctx.canvas.focus();\n            this.ctx.canvas.addEventListener(\"keydown\", e => {\n                let d = 0;\n                if (e.key === \"w\") d = 0;\n                else if (e.key === \"d\") d = 1;\n                else if (e.key === \"s\") d = 2;\n                else if (e.key === \"a\") d = 3;\n    \n                if (d >= 0) {\n                    this.store.state.pk.socket.send(JSON.stringify({\n                        event: \"move\",\n                        direction: d,\n                    }))\n                }\n            })\n        }\n    }\n\n\n    start() {\n        for(let i =0; i < 1000; i++){\n            if (this.create_walls()) break;\n        }\n\n        this.add_listening_events();\n\n    }\n\n    update_size() {\n        this.L = parseInt(Math.min(this.parent.clientWidth / this.cols, this.parent.clientHeight / this.rows));\n        this.ctx.canvas.width = this.L * this.cols;\n        this.ctx.canvas.height = this.L * this.rows;\n    }\n\n\n    check_ready() { //judge if two snake is ready for the next round\n        for (const snake of this.snakes) {\n            if (snake.status !== \"idle\") return false;\n            if (snake.direction === -1) return false;\n        }\n        return true;\n    }\n\n    next_step() { // let the two snake goes into next round\n        for (const snake of this.snakes) {\n            snake.next_step();  \n        }\n    }\n\n    judge(cell) { // judge if cell is a valid moving target\n        for (const wall of this.walls) {\n            if (wall.r === cell.r && wall.c === cell.c){\n                return false;\n            }\n        }\n\n        for (const snake of this.snakes) {\n            let k = snake.cells.length;\n            if (!snake.check_tail_increasing()) {\n                k --;\n            }\n            for (let i = 0; i < k; i++) {\n                if (snake.cells[i].r === cell.r && snake.cells[i].c === cell.c) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    update() {\n        this.update_size();\n        this.render();\n        if (this.check_ready()) {\n            this.next_step();\n        }\n\n    }\n\n    render() {\n        const color_even = \"#82EAFD\", color_odd = \"#02BADA\";\n        for (let r = 0; r < this.rows; r++){\n            for (let c = 0; c < this.cols; c++) {\n                if ((r + c) % 2 == 0) {\n                    this.ctx.fillStyle = color_even;\n                } else {\n                    this.ctx.fillStyle = color_odd;\n                }\n                this.ctx.fillRect(c * this.L, r * this.L, this.L, this.L)\n            }\n        }\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}