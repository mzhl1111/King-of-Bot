{"ast":null,"code":"import { Cell } from \"./Cell\";\nimport { GameObject } from \"./GameObject\";\nexport class Snake extends GameObject {\n  constructor(info, gamemap) {\n    super();\n    this.id = info.id;\n    this.color = info.color;\n    this.gamemap = gamemap;\n    this.cells = [new Cell(info.r, info.c)]; // saves the body of the snake, cell[0] represnts the head\n    this.next_cell = null; // the target grid for nex step\n\n    this.speed = 5; // snake moves 5 cell per second\n    this.direction = -1; // -1 represents no command, 0, 1, 2, 3 for up, right, down, left\n    this.status = \"idle\"; // idle reprenst no movement, move for moving and die for die\n\n    this.dr = [-1, 0, 1, 0];\n    this.dc = [0, 1, 0, -1]; // combined as moving up, right, down and left\n\n    this.rounds = 0; // # of rounds\n    this.eps = 1e-2;\n  }\n  set_direction(d) {\n    this.direction = d;\n  }\n  check_tail_increasing() {\n    // the length of snake always increas for first 10 round and then increase every 3 round afater 10 (13, 16, 19, .....)\n    if (this.rounds <= 10) return true;\n    if (this.rounds % 3 === 1) return true;\n    return false;\n  }\n  start() {}\n  next_step() {\n    // change the status of stake to next round\n    const d = this.direction;\n    this.next_cell = new Cell(this.cells[0].r + this.dr[d], this.cells[0].c + this.dc[d]);\n    this.direction = -1;\n    this.status = \"move\";\n    this.rounds++;\n    const k = this.cells.length;\n    for (let i = k; i > 0; i--) {\n      this.cells[i] = JSON.parse(JSON.stringify(this.cells[i - 1]));\n    }\n  }\n  update_move() {\n    const dx = this.next_cell.x - this.cells[0].x;\n    const dy = this.next_cell.y - this.cells[0].y;\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    if (distance < this.eps) {\n      this.cells[0] = this.next_cell; // update the snake head\n      this.next_cell = null;\n      this.status = \"idle\"; // mark as movement ends\n\n      if (!this.check_tail_increasing()) {\n        this.cells.pop();\n      }\n    } else {\n      const move_distance_per_frame = this.speed * this.time_delta / 1000; // move distance between two frame\n      this.cells[0].x += move_distance_per_frame * dx / distance;\n      this.cells[0].y += move_distance_per_frame * dy / distance;\n      if (!this.check_tail_increasing()) {\n        const k = this.cells.length;\n        const tail = this.cells[k - 1],\n          tail_target = this.cells[k - 2];\n        const tail_dx = tail_target.x - tail.x;\n        const tail_dy = tail_target.y - tail.y;\n        tail.x += move_distance_per_frame * tail_dx / distance;\n        tail.y += move_distance_per_frame * tail_dy / distance;\n      }\n    }\n  }\n  update() {\n    if (this.status === \"move\") {\n      this.update_move();\n    }\n    this.render();\n  }\n  equals(x, y) {\n    if (Math.abs(x - y) < this.eps) return true;\n    return false;\n  }\n  render() {\n    const L = this.gamemap.L;\n    const ctx = this.gamemap.ctx;\n    ctx.fillStyle = this.color;\n    for (const cell of this.cells) {\n      ctx.beginPath();\n      ctx.arc(cell.x * L, cell.y * L, L / 2, 0, Math.PI * 2);\n      ctx.fill();\n    }\n    for (let i = 1; i < this.cells.length; i++) {\n      const a = this.cells[i - 1],\n        b = this;\n    }\n  }\n}","map":{"version":3,"names":["Cell","GameObject","Snake","constructor","info","gamemap","id","color","cells","r","c","next_cell","speed","direction","status","dr","dc","rounds","eps","set_direction","d","check_tail_increasing","start","next_step","k","length","i","JSON","parse","stringify","update_move","dx","x","dy","y","distance","Math","sqrt","pop","move_distance_per_frame","time_delta","tail","tail_target","tail_dx","tail_dy","update","render","equals","abs","L","ctx","fillStyle","cell","beginPath","arc","PI","fill","a","b"],"sources":["/Users/muzhouliu/Desktop/acwing/kob/web/src/assets/scripts/Snake.js"],"sourcesContent":["import { Cell } from \"./Cell\";\nimport { GameObject } from \"./GameObject\";\n\n\nexport class Snake extends GameObject{\n    constructor(info, gamemap){\n        super();\n\n        this.id = info.id;\n        this.color = info.color;\n        this.gamemap = gamemap;\n\n        this.cells = [new Cell(info.r, info.c)] // saves the body of the snake, cell[0] represnts the head\n        this.next_cell = null; // the target grid for nex step\n\n        this.speed = 5 // snake moves 5 cell per second\n        this.direction = -1 // -1 represents no command, 0, 1, 2, 3 for up, right, down, left\n        this.status = \"idle\" // idle reprenst no movement, move for moving and die for die\n\n\n        this.dr = [-1, 0, 1, 0];\n        this.dc = [0, 1, 0, -1]; // combined as moving up, right, down and left\n\n        this.rounds = 0; // # of rounds\n        this.eps = 1e-2;\n    }\n\n    set_direction(d) {\n        this.direction = d;\n    }\n\n    check_tail_increasing(){ // the length of snake always increas for first 10 round and then increase every 3 round afater 10 (13, 16, 19, .....)\n        if (this.rounds <= 10) return true;\n        if (this.rounds % 3 === 1) return true;\n\n        return false;\n    }\n\n    start() {\n\n    }\n\n    next_step() { // change the status of stake to next round\n        const d = this.direction;\n        this.next_cell = new Cell(this.cells[0].r + this.dr[d], this.cells[0].c + this.dc[d]);\n        this.direction = -1;\n        this.status = \"move\";\n        this.rounds ++;\n\n        const k = this.cells.length;\n        for (let i = k; i > 0; i--) {\n            this.cells[i] = JSON.parse(JSON.stringify(this.cells[i-1]));\n        }\n    }\n\n    update_move() {\n\n        const dx = this.next_cell.x - this.cells[0].x;\n        const dy = this.next_cell.y - this.cells[0].y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n\n        if (distance < this.eps) {\n            this.cells[0] = this.next_cell; // update the snake head\n            this.next_cell = null; \n            this.status = \"idle\" // mark as movement ends\n\n            if(!this.check_tail_increasing()){\n                this.cells.pop();\n            }\n        } else {\n            const move_distance_per_frame = this.speed * this.time_delta / 1000; // move distance between two frame\n            this.cells[0].x += move_distance_per_frame * dx / distance;\n            this.cells[0].y += move_distance_per_frame * dy / distance;\n\n            if (!this.check_tail_increasing()) {\n                const k  = this.cells.length;\n                const tail = this.cells[k-1], tail_target = this.cells[k-2];\n                const tail_dx = tail_target.x - tail.x;\n                const tail_dy = tail_target.y - tail.y;\n                tail.x += move_distance_per_frame * tail_dx / distance;\n                tail.y += move_distance_per_frame * tail_dy / distance;\n            }\n        }\n\n\n    }\n\n    update() {\n        if (this.status === \"move\") {\n            this.update_move();\n        }\n        this.render();\n    }\n\n    equals (x, y){\n        if (Math.abs(x -y) < this.eps) return true;\n        return false;\n    }\n\n    render() {\n        const L = this.gamemap.L;\n        const ctx = this.gamemap.ctx;\n\n        ctx.fillStyle = this.color;\n        for (const cell of this.cells) {\n            ctx.beginPath();\n            ctx.arc(cell.x * L, cell.y * L, L / 2, 0, Math.PI * 2);\n            ctx.fill();\n        }\n\n        for (let i = 1; i < this.cells.length; i++) {\n            const a = this.cells[i -1], b= this\n        }\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}