{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport ContentCard from \"@/components/ContentCard.vue\";\nimport { useStore } from \"vuex\";\nimport $ from \"jquery\";\nimport { ref } from \"vue\";\nimport router from \"@/router/index\";\nexport default {\n  components: {\n    ContentCard\n  },\n  setup() {\n    const store = useStore();\n    let replays = ref([]);\n    let current_page = 1;\n    let total_replays = 0;\n    let max_pages = 0;\n    let next_prev = ref([]);\n    let pages = ref([]);\n    const update_pages = () => {\n      let new_pages = [];\n      for (let i = current_page - 2; i < current_page + 2; i++) {\n        if (i >= 1 && i <= max_pages) {\n          new_pages.push({\n            number: i,\n            is_active: i === current_page ? \"active\" : \"inactive\"\n          });\n        }\n      }\n      pages.value = new_pages;\n    };\n    const pull_page = page => {\n      current_page = page;\n      $.ajax({\n        url: \"http://localhost:8888/replay/getlist/\",\n        data: {\n          page\n        },\n        type: \"GET\",\n        headers: {\n          Authorization: \"Bearer \" + store.state.user.token\n        },\n        success(resp) {\n          replays.value = resp.replays;\n          total_replays = resp.replays_count;\n          max_pages = parseInt(Math.ceil(total_replays / 10));\n          ne;\n          perv_disabled = 1 === current_page ? \"disabled\" : \"\";\n          next_disabled = max_pages === current_page ? \"disabled\" : \"\";\n          update_pages();\n        },\n        error(resp) {\n          console.log(resp);\n        }\n      });\n    };\n    pull_page(current_page);\n    const open_replay_content = replayId => {\n      for (const replay of replays.value) {\n        if (replay.replay.id === replayId) {\n          console.log(replay);\n          store.commit(\"updateIsReplay\", true);\n          const map2d = JSON.parse(replay.replay.map).map(innerArray => innerArray.map(Number));\n          store.commit(\"updateGame\", {\n            map: map2d,\n            a_id: replay.replay.aid,\n            a_sx: replay.replay.asx,\n            a_sy: replay.replay.asy,\n            b_id: replay.replay.bid,\n            b_sx: replay.replay.bsx,\n            b_sy: replay.replay.bsy\n          });\n          store.commit(\"updateSteps\", {\n            a_steps: replay.replay.asteps,\n            b_steps: replay.replay.bsteps\n          });\n          store.commit(\"updateReplayLoser\", replay.replay.loser);\n          router.push({\n            name: \"replay_content\",\n            params: {\n              replayId\n            }\n          });\n          break;\n        }\n      }\n    };\n    return {\n      replays,\n      total_replays,\n      max_pages,\n      open_replay_content,\n      pages,\n      next_prev\n    };\n  }\n};","map":{"version":3,"names":["ContentCard","useStore","$","ref","router","components","setup","store","replays","current_page","total_replays","max_pages","next_prev","pages","update_pages","new_pages","i","push","number","is_active","value","pull_page","page","ajax","url","data","type","headers","Authorization","state","user","token","success","resp","replays_count","parseInt","Math","ceil","ne","perv_disabled","next_disabled","error","console","log","open_replay_content","replayId","replay","id","commit","map2d","JSON","parse","map","innerArray","Number","a_id","aid","a_sx","asx","a_sy","asy","b_id","bid","b_sx","bsx","b_sy","bsy","a_steps","asteps","b_steps","bsteps","loser","name","params"],"sources":["/Users/muzhouliu/Desktop/acwing/kob/web/src/views/replay/replayIndexView.vue"],"sourcesContent":["<template>\n    <ContentCard>\n        <table class=\"table table-hover\">\n            <thead>\n                <th> A</th>\n                <th> B</th>\n                <th> Match Result </th>\n                <th> Time </th>\n                <th> ... </th>\n            </thead>\n            <tbody>\n                <tr v-for=\"replay in replays\" :key=\"replay.replay.id\">\n                    <td>\n                        <img :src=\"replay.a_photo\" alt=\"\" class=\"replay-user-photo\">\n                        &nbsp;\n                        <span class=\"replay-user-username\">{{ replay.a_username }}</span>\n                    </td>\n                    <td>\n                        <img :src=\"replay.b_photo\" alt=\"\" class=\"replay-user-photo\">\n                        &nbsp;\n                        <span class=\"replay-user-username\">{{ replay.b_username }}</span>\n                    </td>\n                    <td>\n                        {{replay.result}}\n                    </td>\n                    <td>\n                        {{replay.replay.createTime}}\n                    </td>\n                    <td>\n                        <button @click=\"open_replay_content(replay.replay.id)\" class=\"btn btn-primary\">Watch the replay</button>\n                    </td>\n                </tr>    \n            </tbody>\n        </table>\n\n        <nav aria-label=\"...\">\n            <ul class=\"pagination\" style=\"float: right\">\n                <li class=\"'page-item ' + perv_disabled\">\n                    <a class=\"page-link\">Previous</a>\n                </li>\n                <li :class=\"'page_item ' + page.is_active\" v-for=\"page in pages\" :key=\"page.number\">\n                    <a class=\"page-link\"> {{ page.number }}</a>\n                </li>\n                <li class=\"'page-item' + next_disabled\">\n                <a class=\"page-link\" href=\"#\">Next</a>\n                </li>\n            </ul>\n        </nav>\n    </ContentCard>\n</template>\n\n<script>\nimport ContentCard from \"@/components/ContentCard.vue\";\nimport { useStore } from \"vuex\";\nimport $ from \"jquery\";\nimport { ref } from \"vue\";\nimport router from \"@/router/index\"\n\nexport default {\n    components: {\n        ContentCard\n    },\n    setup() {\n        const store = useStore();\n        let replays = ref([]);\n        let current_page = 1;\n        let total_replays = 0;\n        let max_pages = 0;\n        let next_prev = ref([]);\n        let pages = ref([]);\n\n        const update_pages = () => {\n            let new_pages = [];\n            for (let i = current_page - 2; i < current_page + 2; i++) {\n                if (i >= 1 && i <= max_pages) {\n                    new_pages.push({\n                        number: i,\n                        is_active: i === current_page ? \"active\" : \"inactive\",\n                    });\n                }\n            }\n            pages.value = new_pages;\n        }\n\n\n        const pull_page = page => {\n            current_page = page;\n            $.ajax({\n                url: \"http://localhost:8888/replay/getlist/\",\n                data: {\n                    page,\n                },\n                type: \"GET\",\n                headers: {\n                    Authorization: \"Bearer \" + store.state.user.token,\n                },\n                success(resp) {\n                    replays.value = resp.replays;\n                    total_replays = resp.replays_count;\n                    max_pages = parseInt(Math.ceil(total_replays / 10));\n                    ne\n                    perv_disabled = 1 === current_page? \"disabled\": \"\";\n                    next_disabled = max_pages === current_page? \"disabled\": \"\";\n\n                    update_pages();\n                },\n                error(resp) {\n                    console.log(resp);\n                }\n            })\n        }\n        pull_page(current_page);\n\n        const open_replay_content = replayId => {\n            for (const replay of replays.value) {\n                if (replay.replay.id === replayId) {\n                    console.log(replay)\n                    store.commit(\"updateIsReplay\", true);\n                    const map2d = JSON.parse(replay.replay.map).map(innerArray => innerArray.map(Number));\n                    store.commit(\"updateGame\", {\n                        map: map2d,\n                        a_id: replay.replay.aid,\n                        a_sx: replay.replay.asx,\n                        a_sy: replay.replay.asy,\n                        b_id: replay.replay.bid,\n                        b_sx: replay.replay.bsx,\n                        b_sy: replay.replay.bsy,\n                    });\n                    store.commit(\"updateSteps\", {\n                        a_steps: replay.replay.asteps,\n                        b_steps: replay.replay.bsteps,\n                    })\n                    store.commit(\"updateReplayLoser\", replay.replay.loser)\n                    router.push({\n                        name: \"replay_content\",\n                        params: {\n                            replayId\n                        }\n                        \n                    })\n                    break;\n                }\n            }\n        }\n\n        return {\n            replays,\n            total_replays,\n            max_pages,\n            open_replay_content,\n            pages,\n            next_prev,\n        }   \n    }\n\n}\n\n</script>\n\n<style scoped>\nimg.replay-user-photo {\n    width: 4vh;\n    border-radius: 50%;\n\n}\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}