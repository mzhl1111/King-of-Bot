{"ast":null,"code":"import PlayGround from \"@/components/PlayGround.vue\";\nimport MatchGround from \"@/components/MatchGround.vue\";\nimport { onMounted, onUnmounted } from \"vue\";\nimport { useStore } from \"vuex\";\nexport default {\n  components: {\n    PlayGround,\n    MatchGround\n  },\n  setup() {\n    const store = useStore();\n    const socketUrl = `ws://localhost:8888/websocket/${store.state.user.token}`;\n    let socket = null;\n    onMounted(() => {\n      store.commit(\"updateOpponent\", {\n        username: '???',\n        photo: \"https://cdn.acwing.com/media/article/image/2022/08/09/1_1db2488f17-anonymous.png\"\n      });\n      socket = new WebSocket(socketUrl);\n      socket.onopen = () => {\n        console.log(\"Connected\");\n        store.commit(\"updateSocket\", socket);\n      };\n      socket.onmessage = msg => {\n        const data = JSON.parse(msg.data);\n        if (data.event === \"start-matching\") {\n          // maching success\n          store.commit(\"updateOpponent\", {\n            username: data.opponent_username,\n            photo: data.opponent_photo\n          });\n          setTimeout(() => {\n            store.commit(\"updateStatus\", \"Playing\");\n          }, 0);\n          store.commit(\"updateGame\", data.game);\n        } else if (data.event === \"move\") {\n          const game = store.state.pk.gameObject;\n          const [snake0, snake1] = game.snakes;\n          snake0;\n        } else if (data.event === \"result\") {}\n        console.log(data);\n      };\n      socket.onclose = () => {\n        console.log(\"Connection closed\");\n      };\n    });\n    onUnmounted(() => {\n      socket.close();\n    });\n  }\n};","map":{"version":3,"names":["PlayGround","MatchGround","onMounted","onUnmounted","useStore","components","setup","store","socketUrl","state","user","token","socket","commit","username","photo","WebSocket","onopen","console","log","onmessage","msg","data","JSON","parse","event","opponent_username","opponent_photo","setTimeout","game","pk","gameObject","snake0","snake1","snakes","onclose","close"],"sources":["/Users/muzhouliu/Desktop/acwing/kob/web/src/views/pk/pkIndexView.vue"],"sourcesContent":["<template>\n    <PlayGround v-if=\"$store.state.pk.status === 'Playing' \"></PlayGround>\n    <MatchGround v-if=\"$store.state.pk.status === 'Matching'\"></MatchGround>\n</template>\n\n\n<script>\nimport PlayGround from \"@/components/PlayGround.vue\"\nimport MatchGround from \"@/components/MatchGround.vue\"\nimport { onMounted, onUnmounted } from \"vue\"\nimport { useStore } from \"vuex\";\n\nexport default {\n    components: {\n        PlayGround,\n        MatchGround\n    },\n    setup() {\n        const store = useStore();\n        const socketUrl = `ws://localhost:8888/websocket/${store.state.user.token}`;\n\n        let socket = null;\n        onMounted(() => {\n            store.commit(\"updateOpponent\", {\n                username: '???',\n                photo : \"https://cdn.acwing.com/media/article/image/2022/08/09/1_1db2488f17-anonymous.png\"\n            })\n            socket = new WebSocket(socketUrl);\n\n            socket.onopen = () => {\n                console.log(\"Connected\");\n                store.commit(\"updateSocket\", socket)\n            }\n\n            socket.onmessage = msg => {\n                const data = JSON.parse(msg.data);\n                if (data.event === \"start-matching\") { // maching success\n                    store.commit(\"updateOpponent\", {\n                        username: data.opponent_username,\n                        photo: data.opponent_photo,\n                    });\n                    setTimeout(() => {\n                        store.commit(\"updateStatus\", \"Playing\")\n                    }, 0)\n                    store.commit(\"updateGame\", data.game)\n                } else if (data.event === \"move\") {\n                    const game = store.state.pk.gameObject;\n                    const [snake0, snake1] = game.snakes;\n                    snake0\n                } else if (data.event === \"result\") {\n\n                }\n                console.log(data);\n            }\n\n            socket.onclose = () => {\n                console.log(\"Connection closed\");\n            }\n\n        });\n\n        onUnmounted(() => {\n            socket.close();\n        })\n    }\n\n}\n</script>\n\n\n<style scoped>\n</style>"],"mappings":"AAOA,OAAOA,UAAS,MAAO,6BAA4B;AACnD,OAAOC,WAAU,MAAO,8BAA6B;AACrD,SAASC,SAAS,EAAEC,WAAU,QAAS,KAAI;AAC3C,SAASC,QAAO,QAAS,MAAM;AAE/B,eAAe;EACXC,UAAU,EAAE;IACRL,UAAU;IACVC;EACJ,CAAC;EACDK,KAAKA,CAAA,EAAG;IACJ,MAAMC,KAAI,GAAIH,QAAQ,CAAC,CAAC;IACxB,MAAMI,SAAQ,GAAK,iCAAgCD,KAAK,CAACE,KAAK,CAACC,IAAI,CAACC,KAAM,EAAC;IAE3E,IAAIC,MAAK,GAAI,IAAI;IACjBV,SAAS,CAAC,MAAM;MACZK,KAAK,CAACM,MAAM,CAAC,gBAAgB,EAAE;QAC3BC,QAAQ,EAAE,KAAK;QACfC,KAAI,EAAI;MACZ,CAAC;MACDH,MAAK,GAAI,IAAII,SAAS,CAACR,SAAS,CAAC;MAEjCI,MAAM,CAACK,MAAK,GAAI,MAAM;QAClBC,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;QACxBZ,KAAK,CAACM,MAAM,CAAC,cAAc,EAAED,MAAM;MACvC;MAEAA,MAAM,CAACQ,SAAQ,GAAIC,GAAE,IAAK;QACtB,MAAMC,IAAG,GAAIC,IAAI,CAACC,KAAK,CAACH,GAAG,CAACC,IAAI,CAAC;QACjC,IAAIA,IAAI,CAACG,KAAI,KAAM,gBAAgB,EAAE;UAAE;UACnClB,KAAK,CAACM,MAAM,CAAC,gBAAgB,EAAE;YAC3BC,QAAQ,EAAEQ,IAAI,CAACI,iBAAiB;YAChCX,KAAK,EAAEO,IAAI,CAACK;UAChB,CAAC,CAAC;UACFC,UAAU,CAAC,MAAM;YACbrB,KAAK,CAACM,MAAM,CAAC,cAAc,EAAE,SAAS;UAC1C,CAAC,EAAE,CAAC;UACJN,KAAK,CAACM,MAAM,CAAC,YAAY,EAAES,IAAI,CAACO,IAAI;QACxC,OAAO,IAAIP,IAAI,CAACG,KAAI,KAAM,MAAM,EAAE;UAC9B,MAAMI,IAAG,GAAItB,KAAK,CAACE,KAAK,CAACqB,EAAE,CAACC,UAAU;UACtC,MAAM,CAACC,MAAM,EAAEC,MAAM,IAAIJ,IAAI,CAACK,MAAM;UACpCF,MAAK;QACT,OAAO,IAAIV,IAAI,CAACG,KAAI,KAAM,QAAQ,EAAE,CAEpC;QACAP,OAAO,CAACC,GAAG,CAACG,IAAI,CAAC;MACrB;MAEAV,MAAM,CAACuB,OAAM,GAAI,MAAM;QACnBjB,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;MACpC;IAEJ,CAAC,CAAC;IAEFhB,WAAW,CAAC,MAAM;MACdS,MAAM,CAACwB,KAAK,CAAC,CAAC;IAClB,CAAC;EACL;AAEJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}