{"ast":null,"code":"import { Cell } from \"./Cell\";\nimport { GameObject } from \"./GameObject\";\nexport class Snake extends GameObject {\n  constructor(info, gamemap) {\n    super();\n    this.id = info.id;\n    this.color = info.color;\n    this.gamemap = gamemap;\n    this.cells = [new Cell(info.r, info.c)]; // saves the body of the snake, cell[0] represnts the head\n    this.next_cell = null; // the target grid for nex step\n\n    this.speed = 5; // snake moves 5 cell per second\n    this.direction = -1; // -1 represents no command, 0, 1, 2, 3 for up, right, down, left\n    this.status = \"idle\"; // idle reprenst no movement, move for moving and die for die\n\n    this.dr = [-1, 0, 1, 0];\n    this.dc = [0, 1, 0, -1]; // combined as moving up, right, down and left\n\n    this.rounds = 0;\n  }\n  set_direction(d) {\n    this.direction = d;\n  }\n  start() {}\n  next_step() {\n    // change the status of stake to next round\n    const d = this.direction;\n    this.next_cell = new Cell(this.cells[0].r + this.dr[d], this.cells[0].c + this.dc[d]);\n    this.direction = -1;\n    this.status = \"move\";\n    this.rounds++;\n    const k = this.cells.length;\n    for (let i = k; i > 0; i--) {\n      this.cells[i] = JSON.parse(JSON.stringify(this.cells[i - 1]));\n    }\n  }\n  update_move() {\n    const move_distance = this.speed * this.time_delta / 1000; // move distance between two frame\n    const dx = this.next_cell.x - this.cells[0].x;\n    const dy = this.next_cell.y - this.cells[0].y;\n    const distance = Math.sqrt;\n  }\n  update() {\n    if (this.status === \"move\") {\n      this.update_move();\n    }\n    this.render();\n  }\n  render() {\n    const L = this.gamemap.L;\n    const ctx = this.gamemap.ctx;\n    ctx.fillStyle = this.color;\n    for (const cell of this.cells) {\n      ctx.beginPath();\n      ctx.arc(cell.x * L, cell.y * L, L / 2, 0, Math.PI * 2);\n      ctx.fill();\n    }\n  }\n}","map":{"version":3,"names":["Cell","GameObject","Snake","constructor","info","gamemap","id","color","cells","r","c","next_cell","speed","direction","status","dr","dc","rounds","set_direction","d","start","next_step","k","length","i","JSON","parse","stringify","update_move","move_distance","time_delta","dx","x","dy","y","distance","Math","sqrt","update","render","L","ctx","fillStyle","cell","beginPath","arc","PI","fill"],"sources":["/Users/muzhouliu/Desktop/acwing/kob/web/src/assets/scripts/Snake.js"],"sourcesContent":["import { Cell } from \"./Cell\";\nimport { GameObject } from \"./GameObject\";\n\n\nexport class Snake extends GameObject{\n    constructor(info, gamemap){\n        super();\n\n        this.id = info.id;\n        this.color = info.color;\n        this.gamemap = gamemap;\n\n        this.cells = [new Cell(info.r, info.c)] // saves the body of the snake, cell[0] represnts the head\n        this.next_cell = null; // the target grid for nex step\n\n        this.speed = 5 // snake moves 5 cell per second\n        this.direction = -1 // -1 represents no command, 0, 1, 2, 3 for up, right, down, left\n        this.status = \"idle\" // idle reprenst no movement, move for moving and die for die\n\n\n        this.dr = [-1, 0, 1, 0];\n        this.dc = [0, 1, 0, -1]; // combined as moving up, right, down and left\n\n        this.rounds = 0;\n    }\n\n    set_direction(d) {\n        this.direction = d;\n    }\n\n    start() {\n\n    }\n\n    next_step() { // change the status of stake to next round\n        const d = this.direction;\n        this.next_cell = new Cell(this.cells[0].r + this.dr[d], this.cells[0].c + this.dc[d]);\n        this.direction = -1;\n        this.status = \"move\";\n        this.rounds ++;\n\n        const k = this.cells.length;\n        for (let i = k; i > 0; i--) {\n            this.cells[i] = JSON.parse(JSON.stringify(this.cells[i-1]));\n        }\n    }\n\n    update_move() {\n        const move_distance = this.speed * this.time_delta / 1000; // move distance between two frame\n        const dx = this.next_cell.x - this.cells[0].x;\n        const dy = this.next_cell.y - this.cells[0].y;\n        const distance = Math.sqrt\n\n        \n    }\n\n    update() {\n        if (this.status === \"move\") {\n            this.update_move();\n        }\n        this.render();\n    }\n\n    render() {\n        const L = this.gamemap.L;\n        const ctx = this.gamemap.ctx;\n\n        ctx.fillStyle = this.color;\n        for (const cell of this.cells) {\n            ctx.beginPath();\n            ctx.arc(cell.x * L, cell.y * L, L / 2, 0, Math.PI * 2);\n            ctx.fill();\n        }\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}